import argparse
import copy
from script import (
    ExecutiveOrder,
    load_cache_from_disk,
)
import difflib
from datetime import datetime

def gen_diff(a: str, b: str) -> str:
    a_lines = a.split('\n')
    b_lines = b.split('\n')
    gen = difflib.unified_diff(a_lines, b_lines)
    return '\n'.join(gen)

def main():
    parser = argparse.ArgumentParser()
    grp = parser.add_mutually_exclusive_group(required=True)
    grp.add_argument('--url', type=str, help='URL to rescrape')
    grp.add_argument('--file', type=str, help='Filename to rescrape')
    parser.add_argument('--out-file', type=str, help='Filename to output to. CAN be the same as the original one. Default - autogenerated')
    parser.add_argument('--repush', action='store_true', help='Push updated EO to Discord servers')
    args = parser.parse_args()

    eo_cache = load_cache_from_disk()

    new_eo = ExecutiveOrder()

    if args.file:
        old_eo = ExecutiveOrder.load_from(args.filename)
        old_eo = copy.deepcopy(old_eo)
        print(f'EO is at {old_eo.url}')
        new_eo.url = old_eo.url
        new_eo.title = old_eo.title

    elif args.url and args.url in eo_cache:
        old_eo = eo_cache[args.url]
        print(f'EO has been previously scraped')
        new_eo.url = args.url
        new_eo.title = old_eo.title

    else:
        old_eo = None
        new_eo.url = args.url

    # we want to rescrape it and compare
    new_eo.scrape_date = datetime.now()
    new_eo.load_text()

    if old_eo and new_eo.text != old_eo.text:
        print('EO has been updated!')
        print('Diff:')
        print(gen_diff(old_eo, new_eo))

        print('Summarizing new EO text.')
        new_eo.generate_summary()

        # save it if it's been changed
        new_eo.save_to_file(args.out_file)
    elif old_eo and new_eo.text == old_eo.text:
        print(f'No changes from previous scrape on {old_eo.scrape_date}')

    should_repush = False
    if args.repush:
        if old_eo is None:
            should_repush = True
        elif old_eo and new_eo.text == old_eo.text:
            print('This EO has not changed. Really rebroadcast it? [Y/n]')
            if input() in (None, '', 'Y', 'y', 'Yes', 'yes'):
                should_repush = True
            else:
                should_repush = False
        else:
            should_repush = True
    else:
        should_repush = False

    if should_repush:
        new_eo.broadcast()


if __name__ == '__main__':
    main()
